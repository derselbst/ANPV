# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  containers:
  - container: qt6Container-linux
    endpoint: 'myDockerHub'
    image: tommoebert332/qt6-build:latest-suse
  - container: qt6Container-win
    endpoint: 'myDockerHub'
    image: tommoebert332/qt6-build:win-jxl

jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-20.04'
    container: qt6Container-linux
    steps:
    - checkout: self
      submodules: true
    - task: CMake@1
      displayName: 'CMake configure'
      inputs:
        cmakeArgs: ..
        workingDirectory: 'build'
    - task: CMake@1
      displayName: 'CMake Build'
      inputs:
        cmakeArgs: --build . --parallel
        workingDirectory: 'build'
    - task: CMake@1
      displayName: 'CMake Check'
      inputs:
        cmakeArgs: --build . --target check --parallel
        workingDirectory: 'build'
  - job: Windows
    timeoutInMinutes: 600
    cancelTimeoutInMinutes: 2
    strategy:
      matrix:
        Win11:
          toolset: 'v143'
          generator: 'Visual Studio 17 2022'
          poo: 'windows-2022'
    pool:
      vmImage: $(poo)
    container: qt6Container-win
    variables:
      configuration: 'Release'
      platform: 'x64'
      VCPKG_INSTALLATION_ROOT: 'C:/vcpkg'
      PKG_CONFIG_PATH: '$(VCPKG_INSTALLATION_ROOT)/installed/$(platform)-windows-static/lib/pkgconfig'
    steps:
    - checkout: self
      submodules: true
    - bash: |
          set -ex
          ls /c/vcpkg/installed/x64-windows-static/
          ls /c/vcpkg/installed/x64-windows-static/lib
          ls /c/vcpkg/installed/x64-windows-static/lib/pkgconfig
          ls /c/vcpkg/installed/x64-windows-static/lib/pkgconfig/libjxl*
          cat /c/vcpkg/installed/x64-windows-static/lib/pkgconfig/libjxl*
          
          set +x
          
          cat << EOF > /c/vcpkg/installed/x64-windows-static/lib/pkgconfig/libjxl.pc
          prefix=\${pcfiledir}/../..
          exec_prefix=\${prefix}
          libdir=\${exec_prefix}/lib
          includedir=\${prefix}/include

          Name: libjxl
          Description: Loads and saves JPEG XL files
          Version: 0.8.2

          Libs: "-L\${libdir}" -ljxl-static
          Libs.private: -ljxl_dec-static
          Requires.private: libhwy libbrotlicommon libbrotlienc libbrotlidec lcms2
          Cflags: "-I\${includedir}"
          Cflags.private: -DJXL_STATIC_DEFINE
          EOF
          
          cat << EOF > /c/vcpkg/installed/x64-windows-static/lib/pkgconfig/libjxl_threads.pc
          prefix=\${pcfiledir}/../..
          exec_prefix=\${prefix}
          libdir=\${exec_prefix}/lib
          includedir=\${prefix}/include

          Name: libjxl_threads
          Description: JPEG XL multi-thread runner using std::threads.
          Version: 0.8.2

          Libs: "-L\${libdir}" -ljxl_threads-static
          Requires: 
          Cflags: "-I\${includedir}"
          Cflags.private: -DJXL_THREADS_STATIC_DEFINE
          EOF
          
      displayName: 'Fix libjxl pkgconfig files'
    - script: |
          @ECHO ON
          mkdir build
          cd build
          call "C:\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" $(platform)
          set PATH=%PATH%;C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64
          set LIB=%LIB%;C:\Program Files (x86)\Windows Kits\10\Lib\10.0.19041.0\um\x64;C:\Program Files (x86)\Windows Kits\10\Lib\10.0.19041.0\ucrt\x64
          set INCLUDE=%INCLUDE%;C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared;C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um;C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\winrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\cppwinrt
          @ECHO ON
          cmake -G Ninja -DCMAKE_BUILD_TYPE=$(configuration)  -DCMAKE_VERBOSE_MAKEFILE=ON -DVCPKG_TARGET_TRIPLET=$(platform)-windows-static -DVCPKG_PLATFORM_TOOLSET=$(toolset) -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%/scripts/buildsystems/vcpkg.cmake -DCMAKE_MAKE_PROGRAM=C:/BuildTools/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe -DCMAKE_INSTALL_PREFIX=$VCPKG_INSTALLATION_ROOT/installed/$(platform)-windows-static -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DCMAKE_VERBOSE_MAKEFILE=1 ..
          cmake --build . --target anpv
      displayName: 'Compile static ANPV'
    - script: |
          call "C:\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" $(platform)
          set path=%path%;C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64
          cmake --build build --target check
      displayName: 'Run unit tests'
      enabled: false
    - task: CopyFiles@2
      continueOnError: true
      displayName: 'Copy ANPV binaries to artifact dir'
      inputs:
        SourceFolder: 'build'
        Contents: '*anpv*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: ANPV-standalone-$(platform)-$(poo)
