# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  containers:
  - container: qt6Container-linux
    endpoint: 'myDockerHub'
    image: tommoebert332/qt6-kf6:latest-linux
  - container: qt6Container-win
    endpoint: 'myDockerHub'
    image: tommoebert332/qt6-kf6:latest-win

parameters:
- name: UseCache
  displayName: Use Dependency Cache
  type: boolean
  default: true

jobs:
  - job: Linux
    variables:
      DEBIAN_FRONTEND: 'noninteractive'
    pool:
      vmImage: 'ubuntu-20.04'
    container: qt6Container-linux
    steps:
    - checkout: self
      submodules: true
    - task: CMake@1
      displayName: 'CMake configure'
      inputs:
        cmakeArgs: ..
        workingDirectory: 'build'
    - task: CMake@1
      displayName: 'CMake Build'
      inputs:
        cmakeArgs: --build . --parallel
        workingDirectory: 'build'
    - task: CMake@1
      displayName: 'CMake Check'
      inputs:
        cmakeArgs: --build . --target check --parallel
        workingDirectory: 'build'
  - job: Windows
    timeoutInMinutes: 600
    cancelTimeoutInMinutes: 2
    strategy:
      matrix:
        Win10:
          toolset: 'v142'
          generator: 'Visual Studio 16 2019'
          poo: 'windows-2019'
        Win11:
          toolset: 'v143'
          generator: 'Visual Studio 17 2022'
          poo: 'windows-2022'
    pool:
      vmImage: $(poo)
    container: qt6Container-win
    variables:
      configuration: 'Release'
      VCPKG_REVISION: '8e1f46de11423e5f7d2395458f5252738ffffbbd'
      VCPKG_MAX_CONCURRENCY: 1
      platform: 'x64'
      cmake_platform: 'x64'
    steps:
    - checkout: self
      submodules: true
    - task: Cache@2
      displayName: "Cache vcpkg's packages"
      enabled: false
      condition: and(not(in(variables['Build.Reason'], 'Schedule')), ${{ parameters.useCache }})
      inputs:
        key: $(VCPKG_REVISION) | "$(platform)" | "$(poo)" | "withstaticlibs6"
        path: '$(VCPKG_INSTALLATION_ROOT)\installed'
        cacheHitVar: CACHE_RESTORED
    - bash: |
        set -ex
        echo $(generator)
        echo $(toolset)
        # choco upgrade ninja -y
        # ninja --version
        cmake --version
        rm -rf C:/Strawberry/perl/bin/pkg-config*
        choco install --svc --sdc -i pkgconfiglite
        # chocoTask=$!
        # manually update vcpkg
        cd $VCPKG_INSTALLATION_ROOT
        # git checkout master
        git remote -v
        git fetch --tags --prune --progress origin
        git checkout --force $(VCPKG_REVISION)
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"
        ./bootstrap-vcpkg.sh
        # wait $chocoTask
        which pkg-config
      displayName: 'Update vcpkg'
      enabled: false
    - script: |
        setx path "%path%;C:\Program Files\Git\bin;%VCPKG_INSTALLATION_ROOT%"
      displayName: 'add bash to PATH'
    - script: |
        echo %PATH%
        bash -c "df -h"
      displayName: 'Check bash'
    - bash: |
        git -C "$VCPKG_INSTALLATION_ROOT" am $(pwd)/0001-Compile-KDE-Framework-against-Qt6.patch
        git -C "$VCPKG_INSTALLATION_ROOT" am $(pwd)/0002-Update-kf5-to-5.95.0.patch
        git -C "$VCPKG_INSTALLATION_ROOT" am $(pwd)/0003-Compile-kf5configwidgets-without-kf5auth-on-Windows.patch
        #git -C "$VCPKG_INSTALLATION_ROOT" am $(pwd)/0004-Fix-KF5-dependencies.patch
      displayName: 'patch vcpkg'
    - bash: |
        set -ex
        vcpkg install --clean-after-build libjpeg-turbo:$(platform)-windows tiff:$(platform)-windows exiv2:$(platform)-windows libraw:$(platform)-windows ecm:$(platform)-windows libjpeg-turbo:$(platform)-windows-static tiff:$(platform)-windows-static exiv2:$(platform)-windows-static libraw:$(platform)-windows-static ecm:$(platform)-windows-static
      displayName: 'vcpkg build Dependencies'
      condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
      enabled: false
    - bash: |
        set -ex
        vcpkg install --clean-after-build qtbase:$(platform)-windows qtsvg:$(platform)-windows qtbase:$(platform)-windows-static qtsvg:$(platform)-windows-static
      displayName: 'vcpkg build Qt6'
      condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
      enabled: false
    - bash: |
        set -ex
        df -h
        vcpkg install --clean-after-build qt5compat:$(platform)-windows qt5compat:$(platform)-windows-static
      displayName: 'vcpkg build Qt5Compat'
      condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
      enabled: false
    - bash: |
        set -ex
        df -h
        vcpkg install --clean-after-build qtimageformats:$(platform)-windows qtimageformats:$(platform)-windows-static
      displayName: 'vcpkg build QtImageformats'
      enabled: false
    - bash: |
        set -ex
        df -h
        vcpkg install --clean-after-build kf5itemviews:$(platform)-windows kf5itemviews:$(platform)-windows-static
      displayName: 'vcpkg build kf5itemviews'
    - bash: |
        set -ex
        df -h
        vcpkg install --clean-after-build --keep-going kf5kio:$(platform)-windows kf5kio:$(platform)-windows-static
      displayName: 'vcpkg build kf5kio'
    - task: CopyFiles@2
      condition: succeededOrFailed()
      continueOnError: true
      displayName: 'Copy logs to artifact dir'
      inputs:
        SourceFolder: ' C:\vcpkg\buildtrees'
        Contents: '**\*.log'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\logs'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish installed libs'
      inputs:
          pathtoPublish: $(VCPKG_INSTALLATION_ROOT)/installed
          artifactName: vcpkg-deps-$(platform)-$(poo)
      condition: succeededOrFailed()
      enabled: false
    - bash: |
        set -ex
        mkdir build
        cd build
        export PKG_CONFIG_PATH=$VCPKG_INSTALLATION_ROOT/installed/$(platform)-windows-static/lib/pkgconfig
        cmake -G "$(generator)" -A "$(cmake_platform)" -T "$(toolset)" -DCMAKE_BUILD_TYPE=$(configuration) -DVCPKG_TARGET_TRIPLET=$(platform)-windows-static -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$VCPKG_INSTALLATION_ROOT/installed/$(platform)-windows-static -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DCMAKE_VERBOSE_MAKEFILE=1 ..
        cmake --build . --config $(configuration) --parallel 3 --target anpv
      displayName: 'Compile static ANPV'
    - task: CopyFiles@2
      enabled: false
      continueOnError: true
      displayName: 'Copy ANPV binaries to artifact dir'
      inputs:
        SourceFolder: 'build\$(configuration)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: ANPV-standalone-$(platform)-$(poo)
