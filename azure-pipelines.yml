# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  containers:
  - container: qt6Container-linux
    endpoint: 'myDockerHub'
    image: tommoebert332/qt6-kf6:latest-linux
  - container: qt6Container-win
    endpoint: 'myDockerHub'
    image: tommoebert332/qt6-kf6:pwsh

parameters:
- name: UseCache
  displayName: Use Dependency Cache
  type: boolean
  default: true

jobs:
  - job: Linux
    variables:
      DEBIAN_FRONTEND: 'noninteractive'
    pool:
      vmImage: 'ubuntu-20.04'
    container: qt6Container-linux
    steps:
    - checkout: self
      submodules: true
    - task: CMake@1
      displayName: 'CMake configure'
      inputs:
        cmakeArgs: ..
        workingDirectory: 'build'
    - task: CMake@1
      displayName: 'CMake Build'
      inputs:
        cmakeArgs: --build . --parallel
        workingDirectory: 'build'
    - task: CMake@1
      displayName: 'CMake Check'
      inputs:
        cmakeArgs: --build . --target check --parallel
        workingDirectory: 'build'
  - job: Windows
    timeoutInMinutes: 600
    cancelTimeoutInMinutes: 2
    strategy:
      matrix:
        Win11:
          toolset: 'v143'
          generator: 'Visual Studio 17 2022'
          poo: 'windows-2022'
    pool:
      vmImage: $(poo)
    container: qt6Container-win
    variables:
      configuration: 'Release'
      VCPKG_REVISION: '8e1f46de11423e5f7d2395458f5252738ffffbbd'
      VCPKG_MAX_CONCURRENCY: 1
      platform: 'x64'
      cmake_platform: 'x64'
    steps:
    - checkout: self
      submodules: true
    - script: |
          mkdir build
          cd build
          set VCPKG_INSTALLATION_ROOT=C:/vcpkg
          set PKG_CONFIG_PATH=%VCPKG_INSTALLATION_ROOT%/installed/$(platform)-windows-static/lib/pkgconfig
          cmake -G "$(generator)" -A "$(cmake_platform)" -T "$(toolset)" -DCMAKE_GENERATOR_INSTANCE=C:\BuildTools -DCMAKE_BUILD_TYPE=$(configuration) -DVCPKG_TARGET_TRIPLET=$(platform)-windows-static -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$VCPKG_INSTALLATION_ROOT/installed/$(platform)-windows-static -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DCMAKE_VERBOSE_MAKEFILE=1 ..
          cmake --build . --config $(configuration) --parallel 3 --target anpv
      displayName: 'Compile static ANPV'
    - bash: |
          cd build
          which bash
      displayName: 'test bash'
    - task: CopyFiles@2
      continueOnError: true
      displayName: 'Copy ANPV binaries to artifact dir'
      inputs:
        SourceFolder: 'build\$(configuration)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: ANPV-standalone-$(platform)-$(poo)
